{
  "author": {
    "name": "Manuel Astudillo",
    "email": "manuel@optimalbits.com",
    "url": "http://optimalbits.com"
  },
  "name": "fs.js",
  "description": "A lightweight wrapper for File System API based on nodejs",
  "version": "0.0.1",
  "main": "./index.js",
  "engines": {
    "node": ">=0.6.10"
  },
  "dependencies": {
    "less": ">=1.2.0",
    "uglify-js": ">=1.2.6"
  },
  "devDependencies": {},
  "readme": "fs.js\n=====\n\nThis module provides a wrapper for the HTML5 File System API inspired in nodejs fs module.\nWhile the underlying HTML5 API is quite feature rich, it is low level and difficult to use.\n\nfs.js provides a good tradeoff between easy to use and flexibility with a cleaner api.\n\nNote that this module is *inspired* by node js, not a port, and will therefore not be \ntotally compatible with it. Also the module provides some useful methods that only\nmake sense on a browser environment (such as getting the url pointing to a local file).\n\n\nInstall\n=======\n\nJust pick up fs.js and include it in a script tag or use it with an AMD compatible loader. \nIf you want to run the unit tests you can install the module via npm:\n\n        npm install fs.js\n        \n\nUnit tests\n==========\n\nThe unit tests are writte using mocha. For running the unit tests you need to use node and a webbrowser\nwith File System API capabilities (only Chrome at the moment).\n\nGo to the test directory and run the test server:\n\n        node server.js\n        \nOpen a webbrowser pointing to http://localhost:8080\n\n\nQuick Start\n===========\n\nStart by creating a file system. Note that we support a prefix for every file system.\nThis prefix allows us to have several independent file systems:\n\n        var sizeInBytes = 1024 * 1024,\n          prefix = 'filetest';\n  \n        FSFactory.create(sizeInBytes, 'test_fs', function(err, fs) {\n          fs.read('foo', function(err, data){\n            // data contains file contents.\n          });\n        });\n\n\nCheck the methods section for all the methods provided by the file system object.\n\n## Methods\n\n<a name=\"remove\"/>\n\nRenames a file or directory.\n\n### rename(oldPath, newPath, function(err))\n\n__Arguments__\n \n    oldPath   {String} Old path.\n    newPath   {String} New path name.\n    callback  {Function} Callback called when finished.\n\n---------------------------------------\n\n<a name=\"stats\"/>\n\nGives stats metadata of a file or directory\n\nThe received metadata in the callback contains the following properties:\nisFile, isDirectory, size, mtime (modification time)\n\n### stats(path, function(err, meta))\n\n__Arguments__\n \n    path   {String} Path to file or directory.\n    callback {Function} Callback called when finished.\n\n---------------------------------------\n\n<a name=\"exists\"/>\n\nChecks if a file exists or not.\n\n### exists(path, function(err, exists))\n\n__Arguments__\n \n    path   {String} Path to file or directory.\n    callback {Function} Callback called when finished.\n\n---------------------------------------\n\n<a name=\"remove\"/>\n\nRemoves the given file from the filesystem.\n\n###   remove(path, function(err))\n###   unlink(path, function(err))\n\n__Arguments__\n \n    path     {String} Path to file.\n    callback {Function} Callback called when finished.\n \n---------------------------------------\n\n<a name=\"rmdir\"/>\n\nRemoves the dir at the given path (and all its contents\nincluding subdirs and files).\n\n###   rmdir(path, function(err))\n\n__Arguments__\n \n    path     {String} Path to directory.\n    callback {Function} Callback called when finished.\n\n---------------------------------------\n\n<a name=\"mkdir\"/>\n\nMakes a directory in the given path.\n\n###   mkdir(path, function(err, direntry))\n\n__Arguments__\n \n    path     {String} Path to directory.\n    callback {Function} Callback called when finished.\n\n\n---------------------------------------\n\n<a name=\"mkpath\"/>\n\nMakes a directory and all the subdirectories (if needed) to the \ngiven path.\n\n###   mkpath(path, function(err, direntry))\n\n__Arguments__\n \n    path     {String} Path to directory.\n    callback {Function} Callback called when finished.\n\n---------------------------------------\n\n<a name=\"readdir\"/>\n\nReads the contents of a directory at the given path.\n\n###   readdir(path, function(err, entries))\n\n__Arguments__\n \n    path     {String} Path to directory.\n    callback {Function} Callback called when finished.\n\n---------------------------------------\n\n<a name=\"readFile\"/>\n\nReads the content of a file specified at the given path.\nThe contents of the file are returned as binary data (ArrayBuffer), \nor as text depending on the selected encoding.\n\n###   readFile(path, encoding, function(err, data))\n\n__Arguments__\n \n    path     {String} Path to a file.\n    encoding [{String}] Optional encoding (such as 'UTF-8'), otherwise returns data as\n    an ArrayBuffer.\n    callback {Function} Callback called when finished.\n\n---------------------------------------\n\n<a name=\"readFileAsBlob\"/>\n\nReads the content of a file specified at the given path as a Blob.\n\n###   readFileAsBlob(path, function(err, blob))\n\n__Arguments__\n \n    path     {String} Path to a file.\n    callback {Function} Callback called when finished.\n\n---------------------------------------\n\n<a name=\"readFileAsUrl\"/>\n\nReads the content of a file specified at the given path as a URL.\nThis function is useful for setting local binary files as \nimages, videos, sounds, fonts, etc.\n\n###   readFileAsUrl(path, function(err, url))\n\n__Arguments__\n \n    path     {String} Path to a file.\n    callback {Function} Callback called when finished.\n\n---------------------------------------\n\n<a name=\"writeFile\"/>\n\nWrites a string, Blob or ArrayBuffer data to a file.\n\n###   writeFile(path, data, function(err))\n\n__Arguments__\n \n    path     {String} Path to a file.\n    data     {String|Blob|ArrayBuffer} Data to write to the file.\n    callback {Function} Callback called when finished.\n\n\n---------------------------------------\n\n<a name=\"appendFile\"/>\n\nAppends a string, Blob or ArrayBuffer to a file.\n\n###   appendFile(path, data, function(err))\n\n__Arguments__\n \n    path     {String} Path to a file.\n    data     {String|Blob|ArrayBuffer} Data to append to the file.\n    callback {Function} Callback called when finished.\n    \n---------------------------------------\n\n<a name=\"wipe\"/>\n\nWipes the whole file system. \n\nUse full = true if you want to wipe the root dir of the filesystem,\nafter doing this, the instance cannot be used anymore.\n\n###   wipe(function(), [full])\n\n__Arguments__\n \n    callback {Function} Callback called when finished.\n    full     {Boolean} true if all filesystems should be removed.\n\n",
  "readmeFilename": "README.md",
  "_id": "fs.js@0.0.1",
  "dist": {
    "shasum": "6d47bc30494eaecc695e32689b39c3c42184e7b7"
  },
  "_from": "fs.js@",
  "_resolved": "https://registry.npmjs.org/fs.js/-/fs.js-0.0.1.tgz"
}
